//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 08-11-2014 10:46:01
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

namespace DataGiic_LiagoModel
{

    /// <summary>
    /// There are no comments for DataGiic_LiagoModel.CMPRECVOL in the schema.
    /// </summary>
    /// <KeyProperties>
    /// TPDOC
    /// NRFACT
    /// LNFACT
    /// NRREG
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="DataGiic_LiagoModel", Name="CMPRECVOL")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CMPRECVOL : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new CMPRECVOL object.
        /// </summary>
        /// <param name="tPDOC">Initial value of TPDOC.</param>
        /// <param name="nRFACT">Initial value of NRFACT.</param>
        /// <param name="lNFACT">Initial value of LNFACT.</param>
        /// <param name="nRREG">Initial value of NRREG.</param>
        public static CMPRECVOL CreateCMPRECVOL(string tPDOC, int nRFACT, int lNFACT, int nRREG)
        {
            CMPRECVOL cMPRECVOL = new CMPRECVOL();
            cMPRECVOL.TPDOC = tPDOC;
            cMPRECVOL.NRFACT = nRFACT;
            cMPRECVOL.LNFACT = lNFACT;
            cMPRECVOL.NRREG = nRREG;
            return cMPRECVOL;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for TPDOC in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string TPDOC
        {
            get
            {
                string value = _TPDOC;
                OnGetTPDOC(ref value);
                return value;
            }
            set
            {
                if (_TPDOC != value)
                {
                  OnTPDOCChanging(ref value);
                  ReportPropertyChanging("TPDOC");
                  _TPDOC = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("TPDOC");
                  OnTPDOCChanged();
              }
            }
        }
        private string _TPDOC;
        partial void OnGetTPDOC(ref string value);
        partial void OnTPDOCChanging(ref string value);
        partial void OnTPDOCChanged();
    
        /// <summary>
        /// There are no comments for NRFACT in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public int NRFACT
        {
            get
            {
                int value = _NRFACT;
                OnGetNRFACT(ref value);
                return value;
            }
            set
            {
                if (_NRFACT != value)
                {
                  OnNRFACTChanging(ref value);
                  ReportPropertyChanging("NRFACT");
                  _NRFACT = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NRFACT");
                  OnNRFACTChanged();
              }
            }
        }
        private int _NRFACT;
        partial void OnGetNRFACT(ref int value);
        partial void OnNRFACTChanging(ref int value);
        partial void OnNRFACTChanged();
    
        /// <summary>
        /// There are no comments for LNFACT in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public int LNFACT
        {
            get
            {
                int value = _LNFACT;
                OnGetLNFACT(ref value);
                return value;
            }
            set
            {
                if (_LNFACT != value)
                {
                  OnLNFACTChanging(ref value);
                  ReportPropertyChanging("LNFACT");
                  _LNFACT = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("LNFACT");
                  OnLNFACTChanged();
              }
            }
        }
        private int _LNFACT;
        partial void OnGetLNFACT(ref int value);
        partial void OnLNFACTChanging(ref int value);
        partial void OnLNFACTChanged();
    
        /// <summary>
        /// There are no comments for NRREG in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public int NRREG
        {
            get
            {
                int value = _NRREG;
                OnGetNRREG(ref value);
                return value;
            }
            set
            {
                if (_NRREG != value)
                {
                  OnNRREGChanging(ref value);
                  ReportPropertyChanging("NRREG");
                  _NRREG = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NRREG");
                  OnNRREGChanged();
              }
            }
        }
        private int _NRREG;
        partial void OnGetNRREG(ref int value);
        partial void OnNRREGChanging(ref int value);
        partial void OnNRREGChanged();
    
        /// <summary>
        /// There are no comments for NRVOL in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> NRVOL
        {
            get
            {
                global::System.Nullable<int> value = _NRVOL;
                OnGetNRVOL(ref value);
                return value;
            }
            set
            {
                if (_NRVOL != value)
                {
                  OnNRVOLChanging(ref value);
                  ReportPropertyChanging("NRVOL");
                  _NRVOL = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NRVOL");
                  OnNRVOLChanged();
              }
            }
        }
        private global::System.Nullable<int> _NRVOL;
        partial void OnGetNRVOL(ref global::System.Nullable<int> value);
        partial void OnNRVOLChanging(ref global::System.Nullable<int> value);
        partial void OnNRVOLChanged();
    
        /// <summary>
        /// There are no comments for QT in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<decimal> QT
        {
            get
            {
                global::System.Nullable<decimal> value = _QT;
                OnGetQT(ref value);
                return value;
            }
            set
            {
                if (_QT != value)
                {
                  OnQTChanging(ref value);
                  ReportPropertyChanging("QT");
                  _QT = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("QT");
                  OnQTChanged();
              }
            }
        }
        private global::System.Nullable<decimal> _QT;
        partial void OnGetQT(ref global::System.Nullable<decimal> value);
        partial void OnQTChanging(ref global::System.Nullable<decimal> value);
        partial void OnQTChanged();
    
        /// <summary>
        /// There are no comments for DOCREF in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string DOCREF
        {
            get
            {
                string value = _DOCREF;
                OnGetDOCREF(ref value);
                return value;
            }
            set
            {
                if (_DOCREF != value)
                {
                  OnDOCREFChanging(ref value);
                  ReportPropertyChanging("DOCREF");
                  _DOCREF = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("DOCREF");
                  OnDOCREFChanged();
              }
            }
        }
        private string _DOCREF;
        partial void OnGetDOCREF(ref string value);
        partial void OnDOCREFChanging(ref string value);
        partial void OnDOCREFChanged();

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            CMPRECVOL obj = new CMPRECVOL();
            obj.TPDOC = TPDOC;
            obj.NRFACT = NRFACT;
            obj.LNFACT = LNFACT;
            obj.NRREG = NRREG;
            obj.NRVOL = NRVOL;
            obj.QT = QT;
            obj.DOCREF = DOCREF;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          CMPRECVOL toCompare = obj as CMPRECVOL;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.TPDOC, toCompare.TPDOC))
            return false;
          if (!Object.Equals(this.NRFACT, toCompare.NRFACT))
            return false;
          if (!Object.Equals(this.LNFACT, toCompare.LNFACT))
            return false;
          if (!Object.Equals(this.NRREG, toCompare.NRREG))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + TPDOC.GetHashCode();
          hashCode = (hashCode * 7) + NRFACT.GetHashCode();
          hashCode = (hashCode * 7) + LNFACT.GetHashCode();
          hashCode = (hashCode * 7) + NRREG.GetHashCode();
          return hashCode;
        }

        #endregion
    }

}
