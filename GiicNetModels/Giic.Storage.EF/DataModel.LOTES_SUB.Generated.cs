//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 08-11-2014 10:46:01
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

namespace DataGiic_LiagoModel
{

    /// <summary>
    /// There are no comments for DataGiic_LiagoModel.LOTES_SUB in the schema.
    /// </summary>
    /// <KeyProperties>
    /// ORDFAB
    /// LOTE
    /// SUBLOTE
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="DataGiic_LiagoModel", Name="LOTES_SUB")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LOTES_SUB : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new LOTES_SUB object.
        /// </summary>
        /// <param name="oRDFAB">Initial value of ORDFAB.</param>
        /// <param name="lOTE">Initial value of LOTE.</param>
        /// <param name="sUBLOTE">Initial value of SUBLOTE.</param>
        /// <param name="tAM">Initial value of TAM.</param>
        /// <param name="iTAM">Initial value of ITAM.</param>
        /// <param name="qT">Initial value of QT.</param>
        public static LOTES_SUB CreateLOTES_SUB(string oRDFAB, int lOTE, int sUBLOTE, string tAM, int iTAM, int qT)
        {
            LOTES_SUB lOTES_SUB = new LOTES_SUB();
            lOTES_SUB.ORDFAB = oRDFAB;
            lOTES_SUB.LOTE = lOTE;
            lOTES_SUB.SUBLOTE = sUBLOTE;
            lOTES_SUB.TAM = tAM;
            lOTES_SUB.ITAM = iTAM;
            lOTES_SUB.QT = qT;
            return lOTES_SUB;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for ORDFAB in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string ORDFAB
        {
            get
            {
                string value = _ORDFAB;
                OnGetORDFAB(ref value);
                return value;
            }
            set
            {
                if (_ORDFAB != value)
                {
                  OnORDFABChanging(ref value);
                  ReportPropertyChanging("ORDFAB");
                  _ORDFAB = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("ORDFAB");
                  OnORDFABChanged();
              }
            }
        }
        private string _ORDFAB;
        partial void OnGetORDFAB(ref string value);
        partial void OnORDFABChanging(ref string value);
        partial void OnORDFABChanged();
    
        /// <summary>
        /// There are no comments for LOTE in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public int LOTE
        {
            get
            {
                int value = _LOTE;
                OnGetLOTE(ref value);
                return value;
            }
            set
            {
                if (_LOTE != value)
                {
                  OnLOTEChanging(ref value);
                  ReportPropertyChanging("LOTE");
                  _LOTE = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("LOTE");
                  OnLOTEChanged();
              }
            }
        }
        private int _LOTE;
        partial void OnGetLOTE(ref int value);
        partial void OnLOTEChanging(ref int value);
        partial void OnLOTEChanged();
    
        /// <summary>
        /// There are no comments for SUBLOTE in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public int SUBLOTE
        {
            get
            {
                int value = _SUBLOTE;
                OnGetSUBLOTE(ref value);
                return value;
            }
            set
            {
                if (_SUBLOTE != value)
                {
                  OnSUBLOTEChanging(ref value);
                  ReportPropertyChanging("SUBLOTE");
                  _SUBLOTE = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("SUBLOTE");
                  OnSUBLOTEChanged();
              }
            }
        }
        private int _SUBLOTE;
        partial void OnGetSUBLOTE(ref int value);
        partial void OnSUBLOTEChanging(ref int value);
        partial void OnSUBLOTEChanged();
    
        /// <summary>
        /// There are no comments for TAM in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string TAM
        {
            get
            {
                string value = _TAM;
                OnGetTAM(ref value);
                return value;
            }
            set
            {
                if (_TAM != value)
                {
                  OnTAMChanging(ref value);
                  ReportPropertyChanging("TAM");
                  _TAM = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("TAM");
                  OnTAMChanged();
              }
            }
        }
        private string _TAM;
        partial void OnGetTAM(ref string value);
        partial void OnTAMChanging(ref string value);
        partial void OnTAMChanged();
    
        /// <summary>
        /// There are no comments for ITAM in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Required()]
        public int ITAM
        {
            get
            {
                int value = _ITAM;
                OnGetITAM(ref value);
                return value;
            }
            set
            {
                if (_ITAM != value)
                {
                  OnITAMChanging(ref value);
                  ReportPropertyChanging("ITAM");
                  _ITAM = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ITAM");
                  OnITAMChanged();
              }
            }
        }
        private int _ITAM;
        partial void OnGetITAM(ref int value);
        partial void OnITAMChanging(ref int value);
        partial void OnITAMChanged();
    
        /// <summary>
        /// There are no comments for QT in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Required()]
        public int QT
        {
            get
            {
                int value = _QT;
                OnGetQT(ref value);
                return value;
            }
            set
            {
                if (_QT != value)
                {
                  OnQTChanging(ref value);
                  ReportPropertyChanging("QT");
                  _QT = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("QT");
                  OnQTChanged();
              }
            }
        }
        private int _QT;
        partial void OnGetQT(ref int value);
        partial void OnQTChanging(ref int value);
        partial void OnQTChanged();
    
        /// <summary>
        /// There are no comments for QTEA in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> QTEA
        {
            get
            {
                global::System.Nullable<int> value = _QTEA;
                OnGetQTEA(ref value);
                return value;
            }
            set
            {
                if (_QTEA != value)
                {
                  OnQTEAChanging(ref value);
                  ReportPropertyChanging("QTEA");
                  _QTEA = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("QTEA");
                  OnQTEAChanged();
              }
            }
        }
        private global::System.Nullable<int> _QTEA;
        partial void OnGetQTEA(ref global::System.Nullable<int> value);
        partial void OnQTEAChanging(ref global::System.Nullable<int> value);
        partial void OnQTEAChanged();
    
        /// <summary>
        /// There are no comments for DATAE in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<System.DateTime> DATAE
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _DATAE;
                OnGetDATAE(ref value);
                return value;
            }
            set
            {
                if (_DATAE != value)
                {
                  OnDATAEChanging(ref value);
                  ReportPropertyChanging("DATAE");
                  _DATAE = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DATAE");
                  OnDATAEChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _DATAE;
        partial void OnGetDATAE(ref global::System.Nullable<System.DateTime> value);
        partial void OnDATAEChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OnDATAEChanged();
    
        /// <summary>
        /// There are no comments for DATAS in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<System.DateTime> DATAS
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _DATAS;
                OnGetDATAS(ref value);
                return value;
            }
            set
            {
                if (_DATAS != value)
                {
                  OnDATASChanging(ref value);
                  ReportPropertyChanging("DATAS");
                  _DATAS = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DATAS");
                  OnDATASChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _DATAS;
        partial void OnGetDATAS(ref global::System.Nullable<System.DateTime> value);
        partial void OnDATASChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OnDATASChanged();

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            LOTES_SUB obj = new LOTES_SUB();
            obj.ORDFAB = ORDFAB;
            obj.LOTE = LOTE;
            obj.SUBLOTE = SUBLOTE;
            obj.TAM = TAM;
            obj.ITAM = ITAM;
            obj.QT = QT;
            obj.QTEA = QTEA;
            obj.DATAE = DATAE;
            obj.DATAS = DATAS;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          LOTES_SUB toCompare = obj as LOTES_SUB;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.ORDFAB, toCompare.ORDFAB))
            return false;
          if (!Object.Equals(this.LOTE, toCompare.LOTE))
            return false;
          if (!Object.Equals(this.SUBLOTE, toCompare.SUBLOTE))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + ORDFAB.GetHashCode();
          hashCode = (hashCode * 7) + LOTE.GetHashCode();
          hashCode = (hashCode * 7) + SUBLOTE.GetHashCode();
          return hashCode;
        }

        #endregion
    }

}
