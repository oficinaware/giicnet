//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 08-11-2014 10:46:01
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

namespace DataGiic_LiagoModel
{

    /// <summary>
    /// There are no comments for DataGiic_LiagoModel.MOV_CONSERTOS in the schema.
    /// </summary>
    /// <KeyProperties>
    /// ARMORIG
    /// TPDOC
    /// NRFACT
    /// LNFACT
    /// ID_Activ
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="DataGiic_LiagoModel", Name="MOV_CONSERTOS")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MOV_CONSERTOS : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new MOV_CONSERTOS object.
        /// </summary>
        /// <param name="aRMORIG">Initial value of ARMORIG.</param>
        /// <param name="tPDOC">Initial value of TPDOC.</param>
        /// <param name="nRFACT">Initial value of NRFACT.</param>
        /// <param name="lNFACT">Initial value of LNFACT.</param>
        /// <param name="iD_Activ">Initial value of ID_Activ.</param>
        public static MOV_CONSERTOS CreateMOV_CONSERTOS(string aRMORIG, string tPDOC, int nRFACT, int lNFACT, int iD_Activ)
        {
            MOV_CONSERTOS mOV_CONSERTOS = new MOV_CONSERTOS();
            mOV_CONSERTOS.ARMORIG = aRMORIG;
            mOV_CONSERTOS.TPDOC = tPDOC;
            mOV_CONSERTOS.NRFACT = nRFACT;
            mOV_CONSERTOS.LNFACT = lNFACT;
            mOV_CONSERTOS.ID_Activ = iD_Activ;
            return mOV_CONSERTOS;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for ARMORIG in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string ARMORIG
        {
            get
            {
                string value = _ARMORIG;
                OnGetARMORIG(ref value);
                return value;
            }
            set
            {
                if (_ARMORIG != value)
                {
                  OnARMORIGChanging(ref value);
                  ReportPropertyChanging("ARMORIG");
                  _ARMORIG = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("ARMORIG");
                  OnARMORIGChanged();
              }
            }
        }
        private string _ARMORIG;
        partial void OnGetARMORIG(ref string value);
        partial void OnARMORIGChanging(ref string value);
        partial void OnARMORIGChanged();
    
        /// <summary>
        /// There are no comments for TPDOC in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string TPDOC
        {
            get
            {
                string value = _TPDOC;
                OnGetTPDOC(ref value);
                return value;
            }
            set
            {
                if (_TPDOC != value)
                {
                  OnTPDOCChanging(ref value);
                  ReportPropertyChanging("TPDOC");
                  _TPDOC = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("TPDOC");
                  OnTPDOCChanged();
              }
            }
        }
        private string _TPDOC;
        partial void OnGetTPDOC(ref string value);
        partial void OnTPDOCChanging(ref string value);
        partial void OnTPDOCChanged();
    
        /// <summary>
        /// There are no comments for NRFACT in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public int NRFACT
        {
            get
            {
                int value = _NRFACT;
                OnGetNRFACT(ref value);
                return value;
            }
            set
            {
                if (_NRFACT != value)
                {
                  OnNRFACTChanging(ref value);
                  ReportPropertyChanging("NRFACT");
                  _NRFACT = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NRFACT");
                  OnNRFACTChanged();
              }
            }
        }
        private int _NRFACT;
        partial void OnGetNRFACT(ref int value);
        partial void OnNRFACTChanging(ref int value);
        partial void OnNRFACTChanged();
    
        /// <summary>
        /// There are no comments for LNFACT in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public int LNFACT
        {
            get
            {
                int value = _LNFACT;
                OnGetLNFACT(ref value);
                return value;
            }
            set
            {
                if (_LNFACT != value)
                {
                  OnLNFACTChanging(ref value);
                  ReportPropertyChanging("LNFACT");
                  _LNFACT = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("LNFACT");
                  OnLNFACTChanged();
              }
            }
        }
        private int _LNFACT;
        partial void OnGetLNFACT(ref int value);
        partial void OnLNFACTChanging(ref int value);
        partial void OnLNFACTChanged();
    
        /// <summary>
        /// There are no comments for ID_Activ in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public int ID_Activ
        {
            get
            {
                int value = _ID_Activ;
                OnGetID_Activ(ref value);
                return value;
            }
            set
            {
                if (_ID_Activ != value)
                {
                  OnID_ActivChanging(ref value);
                  ReportPropertyChanging("ID_Activ");
                  _ID_Activ = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ID_Activ");
                  OnID_ActivChanged();
              }
            }
        }
        private int _ID_Activ;
        partial void OnGetID_Activ(ref int value);
        partial void OnID_ActivChanging(ref int value);
        partial void OnID_ActivChanged();
    
        /// <summary>
        /// There are no comments for ARMDEST in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string ARMDEST
        {
            get
            {
                string value = _ARMDEST;
                OnGetARMDEST(ref value);
                return value;
            }
            set
            {
                if (_ARMDEST != value)
                {
                  OnARMDESTChanging(ref value);
                  ReportPropertyChanging("ARMDEST");
                  _ARMDEST = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("ARMDEST");
                  OnARMDESTChanged();
              }
            }
        }
        private string _ARMDEST;
        partial void OnGetARMDEST(ref string value);
        partial void OnARMDESTChanging(ref string value);
        partial void OnARMDESTChanged();
    
        /// <summary>
        /// There are no comments for CDFORN in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string CDFORN
        {
            get
            {
                string value = _CDFORN;
                OnGetCDFORN(ref value);
                return value;
            }
            set
            {
                if (_CDFORN != value)
                {
                  OnCDFORNChanging(ref value);
                  ReportPropertyChanging("CDFORN");
                  _CDFORN = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("CDFORN");
                  OnCDFORNChanged();
              }
            }
        }
        private string _CDFORN;
        partial void OnGetCDFORN(ref string value);
        partial void OnCDFORNChanging(ref string value);
        partial void OnCDFORNChanged();
    
        /// <summary>
        /// There are no comments for DATA in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<System.DateTime> DATA
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _DATA;
                OnGetDATA(ref value);
                return value;
            }
            set
            {
                if (_DATA != value)
                {
                  OnDATAChanging(ref value);
                  ReportPropertyChanging("DATA");
                  _DATA = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DATA");
                  OnDATAChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _DATA;
        partial void OnGetDATA(ref global::System.Nullable<System.DateTime> value);
        partial void OnDATAChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OnDATAChanged();
    
        /// <summary>
        /// There are no comments for HORA in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<System.DateTime> HORA
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _HORA;
                OnGetHORA(ref value);
                return value;
            }
            set
            {
                if (_HORA != value)
                {
                  OnHORAChanging(ref value);
                  ReportPropertyChanging("HORA");
                  _HORA = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("HORA");
                  OnHORAChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _HORA;
        partial void OnGetHORA(ref global::System.Nullable<System.DateTime> value);
        partial void OnHORAChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OnHORAChanged();
    
        /// <summary>
        /// There are no comments for RESP in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string RESP
        {
            get
            {
                string value = _RESP;
                OnGetRESP(ref value);
                return value;
            }
            set
            {
                if (_RESP != value)
                {
                  OnRESPChanging(ref value);
                  ReportPropertyChanging("RESP");
                  _RESP = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("RESP");
                  OnRESPChanged();
              }
            }
        }
        private string _RESP;
        partial void OnGetRESP(ref string value);
        partial void OnRESPChanging(ref string value);
        partial void OnRESPChanged();

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            MOV_CONSERTOS obj = new MOV_CONSERTOS();
            obj.ARMORIG = ARMORIG;
            obj.TPDOC = TPDOC;
            obj.NRFACT = NRFACT;
            obj.LNFACT = LNFACT;
            obj.ID_Activ = ID_Activ;
            obj.ARMDEST = ARMDEST;
            obj.CDFORN = CDFORN;
            obj.DATA = DATA;
            obj.HORA = HORA;
            obj.RESP = RESP;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          MOV_CONSERTOS toCompare = obj as MOV_CONSERTOS;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.ARMORIG, toCompare.ARMORIG))
            return false;
          if (!Object.Equals(this.TPDOC, toCompare.TPDOC))
            return false;
          if (!Object.Equals(this.NRFACT, toCompare.NRFACT))
            return false;
          if (!Object.Equals(this.LNFACT, toCompare.LNFACT))
            return false;
          if (!Object.Equals(this.ID_Activ, toCompare.ID_Activ))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + ARMORIG.GetHashCode();
          hashCode = (hashCode * 7) + TPDOC.GetHashCode();
          hashCode = (hashCode * 7) + NRFACT.GetHashCode();
          hashCode = (hashCode * 7) + LNFACT.GetHashCode();
          hashCode = (hashCode * 7) + ID_Activ.GetHashCode();
          return hashCode;
        }

        #endregion
    }

}
