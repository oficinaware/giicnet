//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 08-11-2014 10:46:01
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

namespace DataGiic_LiagoModel
{

    /// <summary>
    /// There are no comments for DataGiic_LiagoModel.TABCONV in the schema.
    /// </summary>
    /// <KeyProperties>
    /// DA_UNMED
    /// PARA_UNMED
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="DataGiic_LiagoModel", Name="TABCONV")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TABCONV : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new TABCONV object.
        /// </summary>
        /// <param name="dA_UNMED">Initial value of DA_UNMED.</param>
        /// <param name="pARA_UNMED">Initial value of PARA_UNMED.</param>
        public static TABCONV CreateTABCONV(string dA_UNMED, string pARA_UNMED)
        {
            TABCONV tABCONV = new TABCONV();
            tABCONV.DA_UNMED = dA_UNMED;
            tABCONV.PARA_UNMED = pARA_UNMED;
            return tABCONV;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for DA_UNMED in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string DA_UNMED
        {
            get
            {
                string value = _DA_UNMED;
                OnGetDA_UNMED(ref value);
                return value;
            }
            set
            {
                if (_DA_UNMED != value)
                {
                  OnDA_UNMEDChanging(ref value);
                  ReportPropertyChanging("DA_UNMED");
                  _DA_UNMED = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("DA_UNMED");
                  OnDA_UNMEDChanged();
              }
            }
        }
        private string _DA_UNMED;
        partial void OnGetDA_UNMED(ref string value);
        partial void OnDA_UNMEDChanging(ref string value);
        partial void OnDA_UNMEDChanged();
    
        /// <summary>
        /// There are no comments for PARA_UNMED in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string PARA_UNMED
        {
            get
            {
                string value = _PARA_UNMED;
                OnGetPARA_UNMED(ref value);
                return value;
            }
            set
            {
                if (_PARA_UNMED != value)
                {
                  OnPARA_UNMEDChanging(ref value);
                  ReportPropertyChanging("PARA_UNMED");
                  _PARA_UNMED = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("PARA_UNMED");
                  OnPARA_UNMEDChanged();
              }
            }
        }
        private string _PARA_UNMED;
        partial void OnGetPARA_UNMED(ref string value);
        partial void OnPARA_UNMEDChanging(ref string value);
        partial void OnPARA_UNMEDChanged();
    
        /// <summary>
        /// There are no comments for CONV in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<decimal> CONV
        {
            get
            {
                global::System.Nullable<decimal> value = _CONV;
                OnGetCONV(ref value);
                return value;
            }
            set
            {
                if (_CONV != value)
                {
                  OnCONVChanging(ref value);
                  ReportPropertyChanging("CONV");
                  _CONV = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CONV");
                  OnCONVChanged();
              }
            }
        }
        private global::System.Nullable<decimal> _CONV;
        partial void OnGetCONV(ref global::System.Nullable<decimal> value);
        partial void OnCONVChanging(ref global::System.Nullable<decimal> value);
        partial void OnCONVChanged();

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            TABCONV obj = new TABCONV();
            obj.DA_UNMED = DA_UNMED;
            obj.PARA_UNMED = PARA_UNMED;
            obj.CONV = CONV;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          TABCONV toCompare = obj as TABCONV;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.DA_UNMED, toCompare.DA_UNMED))
            return false;
          if (!Object.Equals(this.PARA_UNMED, toCompare.PARA_UNMED))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + DA_UNMED.GetHashCode();
          hashCode = (hashCode * 7) + PARA_UNMED.GetHashCode();
          return hashCode;
        }

        #endregion
    }

}
