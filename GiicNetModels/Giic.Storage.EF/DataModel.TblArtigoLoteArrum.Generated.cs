//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 08-11-2014 10:46:01
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

namespace DataGiic_LiagoModel
{

    /// <summary>
    /// There are no comments for DataGiic_LiagoModel.TblArtigoLoteArrum in the schema.
    /// </summary>
    /// <KeyProperties>
    /// UTIL
    /// ORDEM
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="DataGiic_LiagoModel", Name="TblArtigoLoteArrum")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TblArtigoLoteArrum : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new TblArtigoLoteArrum object.
        /// </summary>
        /// <param name="uTIL">Initial value of UTIL.</param>
        /// <param name="oRDEM">Initial value of ORDEM.</param>
        /// <param name="aRM">Initial value of ARM.</param>
        /// <param name="lOCALORIG">Initial value of LOCALORIG.</param>
        /// <param name="aRTIGO">Initial value of ARTIGO.</param>
        /// <param name="cARTAZ">Initial value of CARTAZ.</param>
        /// <param name="cODCOR">Initial value of CODCOR.</param>
        /// <param name="tAM">Initial value of TAM.</param>
        /// <param name="iDLOTE">Initial value of IDLOTE.</param>
        /// <param name="dESCRICAO">Initial value of DESCRICAO.</param>
        /// <param name="qUANT">Initial value of QUANT.</param>
        public static TblArtigoLoteArrum CreateTblArtigoLoteArrum(string uTIL, int oRDEM, string aRM, string lOCALORIG, string aRTIGO, string cARTAZ, string cODCOR, string tAM, int iDLOTE, string dESCRICAO, decimal qUANT)
        {
            TblArtigoLoteArrum tblArtigoLoteArrum = new TblArtigoLoteArrum();
            tblArtigoLoteArrum.UTIL = uTIL;
            tblArtigoLoteArrum.ORDEM = oRDEM;
            tblArtigoLoteArrum.ARM = aRM;
            tblArtigoLoteArrum.LOCALORIG = lOCALORIG;
            tblArtigoLoteArrum.ARTIGO = aRTIGO;
            tblArtigoLoteArrum.CARTAZ = cARTAZ;
            tblArtigoLoteArrum.CODCOR = cODCOR;
            tblArtigoLoteArrum.TAM = tAM;
            tblArtigoLoteArrum.IDLOTE = iDLOTE;
            tblArtigoLoteArrum.DESCRICAO = dESCRICAO;
            tblArtigoLoteArrum.QUANT = qUANT;
            return tblArtigoLoteArrum;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for UTIL in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string UTIL
        {
            get
            {
                string value = _UTIL;
                OnGetUTIL(ref value);
                return value;
            }
            set
            {
                if (_UTIL != value)
                {
                  OnUTILChanging(ref value);
                  ReportPropertyChanging("UTIL");
                  _UTIL = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("UTIL");
                  OnUTILChanged();
              }
            }
        }
        private string _UTIL;
        partial void OnGetUTIL(ref string value);
        partial void OnUTILChanging(ref string value);
        partial void OnUTILChanged();
    
        /// <summary>
        /// There are no comments for ORDEM in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public int ORDEM
        {
            get
            {
                int value = _ORDEM;
                OnGetORDEM(ref value);
                return value;
            }
            set
            {
                if (_ORDEM != value)
                {
                  OnORDEMChanging(ref value);
                  ReportPropertyChanging("ORDEM");
                  _ORDEM = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ORDEM");
                  OnORDEMChanged();
              }
            }
        }
        private int _ORDEM;
        partial void OnGetORDEM(ref int value);
        partial void OnORDEMChanging(ref int value);
        partial void OnORDEMChanged();
    
        /// <summary>
        /// There are no comments for ARM in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string ARM
        {
            get
            {
                string value = _ARM;
                OnGetARM(ref value);
                return value;
            }
            set
            {
                if (_ARM != value)
                {
                  OnARMChanging(ref value);
                  ReportPropertyChanging("ARM");
                  _ARM = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("ARM");
                  OnARMChanged();
              }
            }
        }
        private string _ARM;
        partial void OnGetARM(ref string value);
        partial void OnARMChanging(ref string value);
        partial void OnARMChanged();
    
        /// <summary>
        /// There are no comments for LOCALORIG in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string LOCALORIG
        {
            get
            {
                string value = _LOCALORIG;
                OnGetLOCALORIG(ref value);
                return value;
            }
            set
            {
                if (_LOCALORIG != value)
                {
                  OnLOCALORIGChanging(ref value);
                  ReportPropertyChanging("LOCALORIG");
                  _LOCALORIG = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("LOCALORIG");
                  OnLOCALORIGChanged();
              }
            }
        }
        private string _LOCALORIG;
        partial void OnGetLOCALORIG(ref string value);
        partial void OnLOCALORIGChanging(ref string value);
        partial void OnLOCALORIGChanged();
    
        /// <summary>
        /// There are no comments for ARTIGO in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string ARTIGO
        {
            get
            {
                string value = _ARTIGO;
                OnGetARTIGO(ref value);
                return value;
            }
            set
            {
                if (_ARTIGO != value)
                {
                  OnARTIGOChanging(ref value);
                  ReportPropertyChanging("ARTIGO");
                  _ARTIGO = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("ARTIGO");
                  OnARTIGOChanged();
              }
            }
        }
        private string _ARTIGO;
        partial void OnGetARTIGO(ref string value);
        partial void OnARTIGOChanging(ref string value);
        partial void OnARTIGOChanged();
    
        /// <summary>
        /// There are no comments for CARTAZ in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string CARTAZ
        {
            get
            {
                string value = _CARTAZ;
                OnGetCARTAZ(ref value);
                return value;
            }
            set
            {
                if (_CARTAZ != value)
                {
                  OnCARTAZChanging(ref value);
                  ReportPropertyChanging("CARTAZ");
                  _CARTAZ = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CARTAZ");
                  OnCARTAZChanged();
              }
            }
        }
        private string _CARTAZ = @"space(5)";
        partial void OnGetCARTAZ(ref string value);
        partial void OnCARTAZChanging(ref string value);
        partial void OnCARTAZChanged();
    
        /// <summary>
        /// There are no comments for CODCOR in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string CODCOR
        {
            get
            {
                string value = _CODCOR;
                OnGetCODCOR(ref value);
                return value;
            }
            set
            {
                if (_CODCOR != value)
                {
                  OnCODCORChanging(ref value);
                  ReportPropertyChanging("CODCOR");
                  _CODCOR = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CODCOR");
                  OnCODCORChanged();
              }
            }
        }
        private string _CODCOR = @"space(3)";
        partial void OnGetCODCOR(ref string value);
        partial void OnCODCORChanging(ref string value);
        partial void OnCODCORChanged();
    
        /// <summary>
        /// There are no comments for TAM in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string TAM
        {
            get
            {
                string value = _TAM;
                OnGetTAM(ref value);
                return value;
            }
            set
            {
                if (_TAM != value)
                {
                  OnTAMChanging(ref value);
                  ReportPropertyChanging("TAM");
                  _TAM = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("TAM");
                  OnTAMChanged();
              }
            }
        }
        private string _TAM = @"space(4)";
        partial void OnGetTAM(ref string value);
        partial void OnTAMChanging(ref string value);
        partial void OnTAMChanged();
    
        /// <summary>
        /// There are no comments for IDLOTE in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Required()]
        public int IDLOTE
        {
            get
            {
                int value = _IDLOTE;
                OnGetIDLOTE(ref value);
                return value;
            }
            set
            {
                if (_IDLOTE != value)
                {
                  OnIDLOTEChanging(ref value);
                  ReportPropertyChanging("IDLOTE");
                  _IDLOTE = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("IDLOTE");
                  OnIDLOTEChanged();
              }
            }
        }
        private int _IDLOTE;
        partial void OnGetIDLOTE(ref int value);
        partial void OnIDLOTEChanging(ref int value);
        partial void OnIDLOTEChanged();
    
        /// <summary>
        /// There are no comments for DESCRICAO in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(45)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string DESCRICAO
        {
            get
            {
                string value = _DESCRICAO;
                OnGetDESCRICAO(ref value);
                return value;
            }
            set
            {
                if (_DESCRICAO != value)
                {
                  OnDESCRICAOChanging(ref value);
                  ReportPropertyChanging("DESCRICAO");
                  _DESCRICAO = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("DESCRICAO");
                  OnDESCRICAOChanged();
              }
            }
        }
        private string _DESCRICAO;
        partial void OnGetDESCRICAO(ref string value);
        partial void OnDESCRICAOChanging(ref string value);
        partial void OnDESCRICAOChanged();
    
        /// <summary>
        /// There are no comments for UNMED in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string UNMED
        {
            get
            {
                string value = _UNMED;
                OnGetUNMED(ref value);
                return value;
            }
            set
            {
                if (_UNMED != value)
                {
                  OnUNMEDChanging(ref value);
                  ReportPropertyChanging("UNMED");
                  _UNMED = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("UNMED");
                  OnUNMEDChanged();
              }
            }
        }
        private string _UNMED;
        partial void OnGetUNMED(ref string value);
        partial void OnUNMEDChanging(ref string value);
        partial void OnUNMEDChanged();
    
        /// <summary>
        /// There are no comments for REFLOTE in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string REFLOTE
        {
            get
            {
                string value = _REFLOTE;
                OnGetREFLOTE(ref value);
                return value;
            }
            set
            {
                if (_REFLOTE != value)
                {
                  OnREFLOTEChanging(ref value);
                  ReportPropertyChanging("REFLOTE");
                  _REFLOTE = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("REFLOTE");
                  OnREFLOTEChanged();
              }
            }
        }
        private string _REFLOTE;
        partial void OnGetREFLOTE(ref string value);
        partial void OnREFLOTEChanging(ref string value);
        partial void OnREFLOTEChanged();
    
        /// <summary>
        /// There are no comments for QUANT in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Required()]
        public decimal QUANT
        {
            get
            {
                decimal value = _QUANT;
                OnGetQUANT(ref value);
                return value;
            }
            set
            {
                if (_QUANT != value)
                {
                  OnQUANTChanging(ref value);
                  ReportPropertyChanging("QUANT");
                  _QUANT = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("QUANT");
                  OnQUANTChanged();
              }
            }
        }
        private decimal _QUANT = 0m;
        partial void OnGetQUANT(ref decimal value);
        partial void OnQUANTChanging(ref decimal value);
        partial void OnQUANTChanged();
    
        /// <summary>
        /// There are no comments for NRREG_STK in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<long> NRREG_STK
        {
            get
            {
                global::System.Nullable<long> value = _NRREG_STK;
                OnGetNRREG_STK(ref value);
                return value;
            }
            set
            {
                if (_NRREG_STK != value)
                {
                  OnNRREG_STKChanging(ref value);
                  ReportPropertyChanging("NRREG_STK");
                  _NRREG_STK = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NRREG_STK");
                  OnNRREG_STKChanged();
              }
            }
        }
        private global::System.Nullable<long> _NRREG_STK;
        partial void OnGetNRREG_STK(ref global::System.Nullable<long> value);
        partial void OnNRREG_STKChanging(ref global::System.Nullable<long> value);
        partial void OnNRREG_STKChanged();
    
        /// <summary>
        /// There are no comments for ID_VOL in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> ID_VOL
        {
            get
            {
                global::System.Nullable<int> value = _ID_VOL;
                OnGetID_VOL(ref value);
                return value;
            }
            set
            {
                if (_ID_VOL != value)
                {
                  OnID_VOLChanging(ref value);
                  ReportPropertyChanging("ID_VOL");
                  _ID_VOL = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ID_VOL");
                  OnID_VOLChanged();
              }
            }
        }
        private global::System.Nullable<int> _ID_VOL;
        partial void OnGetID_VOL(ref global::System.Nullable<int> value);
        partial void OnID_VOLChanging(ref global::System.Nullable<int> value);
        partial void OnID_VOLChanged();

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            TblArtigoLoteArrum obj = new TblArtigoLoteArrum();
            obj.UTIL = UTIL;
            obj.ORDEM = ORDEM;
            obj.ARM = ARM;
            obj.LOCALORIG = LOCALORIG;
            obj.ARTIGO = ARTIGO;
            obj.CARTAZ = CARTAZ;
            obj.CODCOR = CODCOR;
            obj.TAM = TAM;
            obj.IDLOTE = IDLOTE;
            obj.DESCRICAO = DESCRICAO;
            obj.UNMED = UNMED;
            obj.REFLOTE = REFLOTE;
            obj.QUANT = QUANT;
            obj.NRREG_STK = NRREG_STK;
            obj.ID_VOL = ID_VOL;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          TblArtigoLoteArrum toCompare = obj as TblArtigoLoteArrum;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.UTIL, toCompare.UTIL))
            return false;
          if (!Object.Equals(this.ORDEM, toCompare.ORDEM))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + UTIL.GetHashCode();
          hashCode = (hashCode * 7) + ORDEM.GetHashCode();
          return hashCode;
        }

        #endregion
    }

}
