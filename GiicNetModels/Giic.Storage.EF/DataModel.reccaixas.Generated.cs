//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 08-11-2014 10:46:01
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

namespace DataGiic_LiagoModel
{

    /// <summary>
    /// There are no comments for DataGiic_LiagoModel.reccaixas in the schema.
    /// </summary>
    /// <KeyProperties>
    /// ordfab
    /// lote
    /// itam
    /// nrserie
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="DataGiic_LiagoModel", Name="reccaixas")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class reccaixas : EntityObject, ICloneable    {
        #region Factory Method

        /// <summary>
        /// Create a new reccaixas object.
        /// </summary>
        /// <param name="ordfab">Initial value of ordfab.</param>
        /// <param name="lote">Initial value of lote.</param>
        /// <param name="itam">Initial value of itam.</param>
        /// <param name="nrserie">Initial value of nrserie.</param>
        public static reccaixas Createreccaixas(string ordfab, int lote, short itam, int nrserie)
        {
            reccaixas reccaixas = new reccaixas();
            reccaixas.ordfab = ordfab;
            reccaixas.lote = lote;
            reccaixas.itam = itam;
            reccaixas.nrserie = nrserie;
            return reccaixas;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for ordfab in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        [System.ComponentModel.DataAnnotations.Required()]
        public string ordfab
        {
            get
            {
                string value = _ordfab;
                OnGetordfab(ref value);
                return value;
            }
            set
            {
                if (_ordfab != value)
                {
                  OnordfabChanging(ref value);
                  ReportPropertyChanging("ordfab");
                  _ordfab = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("ordfab");
                  OnordfabChanged();
              }
            }
        }
        private string _ordfab;
        partial void OnGetordfab(ref string value);
        partial void OnordfabChanging(ref string value);
        partial void OnordfabChanged();
    
        /// <summary>
        /// There are no comments for lote in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public int lote
        {
            get
            {
                int value = _lote;
                OnGetlote(ref value);
                return value;
            }
            set
            {
                if (_lote != value)
                {
                  OnloteChanging(ref value);
                  ReportPropertyChanging("lote");
                  _lote = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("lote");
                  OnloteChanged();
              }
            }
        }
        private int _lote;
        partial void OnGetlote(ref int value);
        partial void OnloteChanging(ref int value);
        partial void OnloteChanged();
    
        /// <summary>
        /// There are no comments for itam in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public short itam
        {
            get
            {
                short value = _itam;
                OnGetitam(ref value);
                return value;
            }
            set
            {
                if (_itam != value)
                {
                  OnitamChanging(ref value);
                  ReportPropertyChanging("itam");
                  _itam = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("itam");
                  OnitamChanged();
              }
            }
        }
        private short _itam;
        partial void OnGetitam(ref short value);
        partial void OnitamChanging(ref short value);
        partial void OnitamChanged();
    
        /// <summary>
        /// There are no comments for nrserie in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.Key]
        [System.ComponentModel.DataAnnotations.Required()]
        public int nrserie
        {
            get
            {
                int value = _nrserie;
                OnGetnrserie(ref value);
                return value;
            }
            set
            {
                if (_nrserie != value)
                {
                  OnnrserieChanging(ref value);
                  ReportPropertyChanging("nrserie");
                  _nrserie = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("nrserie");
                  OnnrserieChanged();
              }
            }
        }
        private int _nrserie;
        partial void OnGetnrserie(ref int value);
        partial void OnnrserieChanging(ref int value);
        partial void OnnrserieChanged();
    
        /// <summary>
        /// There are no comments for PosEnco in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string PosEnco
        {
            get
            {
                string value = _PosEnco;
                OnGetPosEnco(ref value);
                return value;
            }
            set
            {
                if (_PosEnco != value)
                {
                  OnPosEncoChanging(ref value);
                  ReportPropertyChanging("PosEnco");
                  _PosEnco = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("PosEnco");
                  OnPosEncoChanged();
              }
            }
        }
        private string _PosEnco;
        partial void OnGetPosEnco(ref string value);
        partial void OnPosEncoChanging(ref string value);
        partial void OnPosEncoChanged();
    
        /// <summary>
        /// There are no comments for tam in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string tam
        {
            get
            {
                string value = _tam;
                OnGettam(ref value);
                return value;
            }
            set
            {
                if (_tam != value)
                {
                  OntamChanging(ref value);
                  ReportPropertyChanging("tam");
                  _tam = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("tam");
                  OntamChanged();
              }
            }
        }
        private string _tam;
        partial void OnGettam(ref string value);
        partial void OntamChanging(ref string value);
        partial void OntamChanged();
    
        /// <summary>
        /// There are no comments for data in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<System.DateTime> data
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _data;
                OnGetdata(ref value);
                return value;
            }
            set
            {
                if (_data != value)
                {
                  OndataChanging(ref value);
                  ReportPropertyChanging("data");
                  _data = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("data");
                  OndataChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _data;
        partial void OnGetdata(ref global::System.Nullable<System.DateTime> value);
        partial void OndataChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OndataChanged();
    
        /// <summary>
        /// There are no comments for hora in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<System.DateTime> hora
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _hora;
                OnGethora(ref value);
                return value;
            }
            set
            {
                if (_hora != value)
                {
                  OnhoraChanging(ref value);
                  ReportPropertyChanging("hora");
                  _hora = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("hora");
                  OnhoraChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _hora;
        partial void OnGethora(ref global::System.Nullable<System.DateTime> value);
        partial void OnhoraChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OnhoraChanged();
    
        /// <summary>
        /// There are no comments for ARM in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string ARM
        {
            get
            {
                string value = _ARM;
                OnGetARM(ref value);
                return value;
            }
            set
            {
                if (_ARM != value)
                {
                  OnARMChanging(ref value);
                  ReportPropertyChanging("ARM");
                  _ARM = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("ARM");
                  OnARMChanged();
              }
            }
        }
        private string _ARM;
        partial void OnGetARM(ref string value);
        partial void OnARMChanging(ref string value);
        partial void OnARMChanged();
    
        /// <summary>
        /// There are no comments for entid in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string entid
        {
            get
            {
                string value = _entid;
                OnGetentid(ref value);
                return value;
            }
            set
            {
                if (_entid != value)
                {
                  OnentidChanging(ref value);
                  ReportPropertyChanging("entid");
                  _entid = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("entid");
                  OnentidChanged();
              }
            }
        }
        private string _entid;
        partial void OnGetentid(ref string value);
        partial void OnentidChanging(ref string value);
        partial void OnentidChanged();
    
        /// <summary>
        /// There are no comments for docref in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string docref
        {
            get
            {
                string value = _docref;
                OnGetdocref(ref value);
                return value;
            }
            set
            {
                if (_docref != value)
                {
                  OndocrefChanging(ref value);
                  ReportPropertyChanging("docref");
                  _docref = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("docref");
                  OndocrefChanged();
              }
            }
        }
        private string _docref;
        partial void OnGetdocref(ref string value);
        partial void OndocrefChanging(ref string value);
        partial void OndocrefChanged();
    
        /// <summary>
        /// There are no comments for NRPACK in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> NRPACK
        {
            get
            {
                global::System.Nullable<int> value = _NRPACK;
                OnGetNRPACK(ref value);
                return value;
            }
            set
            {
                if (_NRPACK != value)
                {
                  OnNRPACKChanging(ref value);
                  ReportPropertyChanging("NRPACK");
                  _NRPACK = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NRPACK");
                  OnNRPACKChanged();
              }
            }
        }
        private global::System.Nullable<int> _NRPACK;
        partial void OnGetNRPACK(ref global::System.Nullable<int> value);
        partial void OnNRPACKChanging(ref global::System.Nullable<int> value);
        partial void OnNRPACKChanged();
    
        /// <summary>
        /// There are no comments for LNPACK in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> LNPACK
        {
            get
            {
                global::System.Nullable<int> value = _LNPACK;
                OnGetLNPACK(ref value);
                return value;
            }
            set
            {
                if (_LNPACK != value)
                {
                  OnLNPACKChanging(ref value);
                  ReportPropertyChanging("LNPACK");
                  _LNPACK = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("LNPACK");
                  OnLNPACKChanged();
              }
            }
        }
        private global::System.Nullable<int> _LNPACK;
        partial void OnGetLNPACK(ref global::System.Nullable<int> value);
        partial void OnLNPACKChanging(ref global::System.Nullable<int> value);
        partial void OnLNPACKChanged();
    
        /// <summary>
        /// There are no comments for ITEMNR in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> ITEMNR
        {
            get
            {
                global::System.Nullable<int> value = _ITEMNR;
                OnGetITEMNR(ref value);
                return value;
            }
            set
            {
                if (_ITEMNR != value)
                {
                  OnITEMNRChanging(ref value);
                  ReportPropertyChanging("ITEMNR");
                  _ITEMNR = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ITEMNR");
                  OnITEMNRChanged();
              }
            }
        }
        private global::System.Nullable<int> _ITEMNR;
        partial void OnGetITEMNR(ref global::System.Nullable<int> value);
        partial void OnITEMNRChanging(ref global::System.Nullable<int> value);
        partial void OnITEMNRChanged();
    
        /// <summary>
        /// There are no comments for DTPACK in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<System.DateTime> DTPACK
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _DTPACK;
                OnGetDTPACK(ref value);
                return value;
            }
            set
            {
                if (_DTPACK != value)
                {
                  OnDTPACKChanging(ref value);
                  ReportPropertyChanging("DTPACK");
                  _DTPACK = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DTPACK");
                  OnDTPACKChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _DTPACK;
        partial void OnGetDTPACK(ref global::System.Nullable<System.DateTime> value);
        partial void OnDTPACKChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OnDTPACKChanged();

        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            reccaixas obj = new reccaixas();
            obj.ordfab = ordfab;
            obj.lote = lote;
            obj.itam = itam;
            obj.nrserie = nrserie;
            obj.PosEnco = PosEnco;
            obj.tam = tam;
            obj.data = data;
            obj.hora = hora;
            obj.ARM = ARM;
            obj.entid = entid;
            obj.docref = docref;
            obj.NRPACK = NRPACK;
            obj.LNPACK = LNPACK;
            obj.ITEMNR = ITEMNR;
            obj.DTPACK = DTPACK;
            return obj;
        }

        #endregion
    
        #region Equals and GetHashCode methods

        public override bool Equals(object obj)
        {
          reccaixas toCompare = obj as reccaixas;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.ordfab, toCompare.ordfab))
            return false;
          if (!Object.Equals(this.lote, toCompare.lote))
            return false;
          if (!Object.Equals(this.itam, toCompare.itam))
            return false;
          if (!Object.Equals(this.nrserie, toCompare.nrserie))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + ordfab.GetHashCode();
          hashCode = (hashCode * 7) + lote.GetHashCode();
          hashCode = (hashCode * 7) + itam.GetHashCode();
          hashCode = (hashCode * 7) + nrserie.GetHashCode();
          return hashCode;
        }

        #endregion
    }

}
