<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAETZxUtF2sSmRtnE9kbaxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrEvEbZw2Yz/8wFAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEjawipF2sXJRtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0Xa
        xdhG18U6AAAAAAAAAAAAAAAAAAAAAAAAAABE2MM8RdnE80baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9F2cVuAAAAAAAAAAAAAAAAR9bBGUXaxfJG2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G18U6AAAAAAAAAAFF2sW3RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RdnE/UXZxJ1F2sR2RtrElEXZxPlG2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0XYxNY/v78ERtjFKEbaxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0XaxfxF3MdJAAAAAAAAAAAAAAAARNnHKUXaxOxG2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0fbxmRF2sWERtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RdnDsQAAAAAAAAAAAAAAAAAAAAAAAAAARtrFikba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RdnEs0XZ
        xMBG2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2cSVAAAAAAAAAAAAAAAAAAAAAAAA
        AABF3MVCRtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9F2sXyRdnF1Ebaxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0XZxKkAAAAAAAAAAAAA
        AAAAAAAAAAAAAEXZxT5G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9H2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtnF90TZ
        xykAAAAAAAAAAAAAAAAAAAAAAP//AUXaxcNG2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0faxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RNrEkQAAAAAAAAAAAAAAAAAAAAAAAAAAOtfEDUbaxcRG2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/R9rF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9E2cNsAAAAAAAAAABE2MJdRdjFQgAAAAAAAAAARMy7D0XaxMVG2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9H2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0XcxSwAAAAAAAAAAEbaxd1F2cT1RtvEQQAAAAAAAAAAP8+/EEXZ
        xcZG2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0faxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9F2cTaAP//AgAAAABD1skTRdrF+Ubaxf9G2cT0Q9vHQAAA
        AAAAAAAAPNLDEUXZxcdG2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/R9rF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0Xaxa0AAAAAAAAAAETYxV1G2sX/RtrF/0ba
        xf9F2cTzRNrGPwAAAAAAAAAAS+HDEUbaxchG2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9H2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtnGXgAAAAAAAAAARNnEnEba
        xf9G2sX/RtrF/0baxf9F2sXyRdnFPgAAAAAAAAAARtTGEkbYw3hG2sSgRdrFqUXZxPxG2sX/RtrF/0ba
        xf9G2sX/RtrF/0faxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0Xaxfk/2r8cAAAAAAAA
        AABG2sXrRtrF/0baxf9G2sX/RtrF/0baxf9F2cTxR9nEPQAAAAAAAAAAAAAAAAAAAAAAAAAARtvEQUXZ
        xO9G2sX/RtrF/0baxf9G2sX/R9rF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RNjDzwAA
        AAAAAAAARNfALUXZxP1G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9F2cObAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAARdrFhEbaxf9G2sX/RtrF/0baxf9H2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9F28WPAAAAAAAAAABF2sVqRtrF/0baxf9G2sX/RdrF60bZxLhE2sRoRtjFKDPMmQUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABG2sNFRtrF/0baxf9G2sX/RtrF/0faxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RdrE3UPWwiYAAAAAAAAAAEbYxH9H2sXJRtnFiUPbxDk/1L8MAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEXYxHFG2sX/RtrF/0baxf9G2sX/R9rF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0TZxJU/378IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABC3ccXRtvGSD/fvxAAAAAAAAAAAAAAAAAk2rYHRtnE2Ubaxf9G2sX/RtrF/0baxf9H2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sXLAKqqAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARdC5C0ba
        xUxF2sSMRtnF3EXZxPVG2sX/RdrE60XbxWtB28MrRtnDXkXaxNdG2sX/RtrF/0baxf9G2sX/RtrF/0fa
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0XaxWoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABI2sg4RNnDbEXZ
        xbpF2cTwRtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RdnF1Ebaxf9G2sX/RtrF/0baxf9G2sX/RdrEcQAAAAAAAAAAAAAAAAAAAAAAAAAARNrDWkXZ
        xP5G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9F2cTARtrF/0baxf9G2sX/RtrF/0baxf9F2cTVKtTUBgAAAAAAAAAAAAAAADjG
        xglF2cXLRtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RdrF8kXaxYRG2sX/RtrF/0baxf9G2sX/RtrF/0baxf9E2cTERNfENAAA
        AABF3MUsRtrEu0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9F2cSzRtjFKEbaxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9F2cT9RdnE80XaxPpG2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0TbxGQAAAABRtnFx0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9F2cTjP7+/BAAAAABH1sEZRdrF8kba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0TYwzwAAAAAAAAAAAAA
        AABE2MM8RdnE80baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9F2cVuAAAAAAAA
        AAAAAAAAAAAAAAAAAABH28Q5RdrEyUbaxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9F2sTkRdnFPgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARNnFS0baxrxG2sX/RtrF/0baxf9G2sX/RtrF/0ba
        xf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9G2sX/RtrF/0baxf9F2cXGRNnDbDP/
        zAUAAAAAAAAAAAAAAAAAAAAA+AAAD+AAAAfAAAADgAAAAQAAAAAADgAAAB8AAAAfAAAAHwAAAA8AAAAP
        gAAADMAAAAxgAAAIMAAAGBgAABgMAAAYB8AAMAfgADAH4AAwf+AAf/HAAP8AAAH4AAAB8AAAAOAAAABA
        AAAAAAAAAAAAAIAAAAHAAAAD4AAAB/gAAA8=
</value>
  </data>
</root>